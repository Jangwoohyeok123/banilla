form을 보여주기 전에 그리고 addEventListner를 하기 전에,
확인을 해줘야 한다.

이 때, localstorage가 비어 있으면 form부터 보여주면서 지금까지 해오던 것을 하면 된다.
하지만 localStorage에 유저정보가 있으면 form을 보여주면 안된다.
이 경우에 우리는 h1 요소를 보여줘야한다.(greeting)

그럼 이제 우리가 할일은 local Storage에 유저정보 유무를 확인하는 것이다.
if 유저정보가 없다면 form을 보여주고 하던대로 하면 됨
    - get 함수는 value값이 없을 경우 null 이 존재한다.

innerText : 태그 안이 텍스트를 가져오거나 바꾸는 기능
-----------------------------------------------------------------------------------
4.7 Super Recap
히든 클래스를 사용할 경우 소스상에서는 존재하지만 사용자입장에서는 보이지 않는 태그가 된다.
    - display : none; 
localStorage에 정보가 없을 경우 getItem 함수를 사용할 경우 null 을 반환하는 것을 인지한채로 분기문을 작성했다.

분기문 정리
if : onLoginSubmit이 실행되고 localStorage에 데이터가 저장된다.
else : greeting이 실행되도록 hidden class 가 사라진다.

onLoginSubmit 정리
event가 포착될 경우 submit의 기본행동인 새로고침을 preventSubmit() 으로 막고 행위를 추가한다.
classList 를 사용하는데 객체가 가리키는 html 태그를 꾸미는 css 를 관리하는 함수를 포함한다.
    - classList를 이용해서 hidden을 호출해서 더이상의 데이터 입력을 막는다.
    - paintGreeting을 실행하여 사용자 화면에 입력값을 띄어 보여준다. 

-----------------------------------------------------------------------------------

코드를 세분화 하기 위해서 clock.js 파일을 생성함 (divide and conquer)

index.html에 clock.js가 추가됨 
clock을 만들기 위해 h2 헤더를 추가

interval과 timeout에 대한 이해

interval
- 'interval'은 매번 일어나야 하는 무언가를 말한다.
    예를 들어, 2초마다 무언가를 하고 싶을 경우 사용하는 것!
    실 예로, 2초마다 서버를 확인한다던가 주식시장 정보를 알아와야 할 경우에 사용한다.
- setInterval을 자주사용한다. 이 함수는 2개의 매개변수를 필요로 한다.
    첫째로, argument는 네가 실행하고자 하는 function 을 적어야한다. 
    둘째로, argument에 적은 function이 실행되는 간격을 적어주면 된다. 
        단위는 ms(milliseconds)이다. // 5000 = 5초 
    예시) setInterval(sayHello, 5000); 5초마다 실행
timeout
- setTimeout 사용하기
    첫번째 argument는 네가 실행하고자 하는 fnction의 이름을 적어준다.
    두번쨰 argument는 얼마나 기달릴지 시간을 넣어준다.
    예시) 5초뒤에 프로그램을 실행시키고 싶을 경우에 사용하는 함수이다. 


date 이해하기
- new Date() 할 경우 날짜, 시간, 초등등에 관한 메소드를 이용할 수 있게 된다. 

추가로 console.log할 경우 백틱과 보간의 조합을 이용하면 변수를 포맷팅이 가능하다.

문제점
site가 열리자마자 시간을 볼 수 있는 구조가 필요하다.
00꼴로 만들 필요가 있다.
-------------------------------------------------------------------------------------------------------

1을 01로 만드는 방법 == string의 char조합길이의 최소길이를 정하는 방법
- pad~~() 이해하기 
    padStart는 string에 내장된 함수이다.
    예시) "1".padStart(2,"0"); => 앞에서부터 첫번째 매개변수로 채워넣는다. 앞의 스트링을 쓰고, 첫번째 매개변수만큼의 길이가 충족되지 않을 경우, 두번째 매개변수로 채워넣어진다.
    padEnd는 string에 내장된 함수이다.
    예시) "2".padEnd(2, "0"); => 뒤에서부터 두번째 매개변수로 채워넣는다.
- 위의 함수를 쓰기위해서는 타입문제가 존재한다. 
    new Date로 객체를 생성한 뒤 나온 정보는 부동소수점형이다. 이를 string 형식으로 바꿔줘야한다.
    String(new Date().getHours()) 의 꼴로 pad함수류를 사용하기 위한 캐스팅이 필요하다.


--------------------------------------------------------------------------------------------------------

Math.Random을 이용한 무작위 수 이용하기 
    Math.Round()
    - 부동소수점의 한계가 있기에 math.Round 함수르 사용할 필요가 있다.
    - Math.round(1.1) => 1 출력 Math.round(1.5) => 2출력 

    Math.ceil() = 올림
    Math.floot() = 내림 // 바닥까지 내린다는 의미

    결론적으로 아래의 형태로 구현하게 된다.
    - Math.floor(Math.random() * 10)

명언
const quotes = [
  {
    quote:
      "남들이 알아주지 않더라도 너의 일을 묵묵히 하다보면 결국 남 좋은 일만 하게 된다.",
    author: "우리집 강아지",
  },
  {
    quote: "고생 끝에 골병 난다.",
    author: "우리집 강아지",
  },
  {
    quote: "아프냐고 묻지마라. 화장을 안했을 뿐이다.",
    author: "우리집 강아지",
  },
  {
    quote: "내가 쳐맞건말건 지나가던 개도 관심없다.",
    author: "우리집 강아지",
  },
  {
    quote: "늦었다고 생각할 때가 포기해야 할 때다.",
    author: "우리집 강아지",
  },
  {
    quote: "티끌모아 티끌이다.",
    author: "우리집 강아지",
  },
  {
    quote: "우울의 원인을 찾지마세요. 다 돈 때문입니다.",
    author: "우리집 강아지",
  },
  {
    quote: "행복은 돈으로 살 수 없다면 돈이 모르란 것이 아닌지 확인해 보자.",
    author: "우리집 강아지",
  },
  {
    quote:
      '아침부터 "너 일하기 싫으냐?"라는 말을 들었다. 진정 나를 알아봐주는 상사와 함께 일하고 있다',
    author: "우리집 강아지",
  },
];
--------------------------------------------------------------------------------------------------
todo 리스트 만들기

handleToDoSubmit function 만들기
- 

다음으로, 우리는 여기 있는 input의 value를 얻어내고 싶다.
여기서 말하는 input 이란 todo-list 란에 submit된 값을 의미한다.

두가지 옵션이 있다.
첫째, 우리는 todoInput 을 전체 document 에서 찾아볼 수 있다. 전체 html 말이야
둘째, todoInput을 toDoForm 안에서만 찾아볼 수 있다.

즉, document.getElementById("todo-form");  ==  document.querySelector("#todo-form input") 인 상황을 의미한다.

const newTodo 변수에 input 값을 집어 넣는다.
toDoInput.value 의 값을 변경 시켜도 neToDo의 값은 변경되지 않는다. 

--------------------------------------------------------------------------------------------------
7.2
좋아 이제 내가 하고 싶은 건 toDo list 요소를 삭제하는 button을 추가하는 거다.
button은 당연히 JavaScript 에서 만들어질 거야
그리고 이 몯ㄴ 것들이 어떻게 보일지 디자인 해야한다. 
button을 갖게 될건데, 이 번튼을 event를 수신하고 있어야해
<button> 뒤에 이모티콘을 넣음 == X?
여기서 중요한 점은, button이 click event를 기다리고 있어야 한다는 것이다. 알겠지?
왜냐하면 그게 누군가 뭔가를 클릭했을 때 알 수 있는 유일한 방법이기 때문이야.


delete 함수에서 event 의 기능을 살펴보는 방법
우리는 어떤 list element 가 클릭됐는지 알 수 없다.
이 때, click 했을 때 발생한 event 객체를 통해 클릭당시에 정보를 얻어 낼 수 있다.
우리가 사용해야 할 것은 event 객체내부에 parentNode를 통해 button 객체의 부모 객체를 얻어 내는데 목적을 한다.

-----------------------------------------------------------------------------------------------------
7.3 
localStorage 에 todolist 작성할 때 저장을 하려는 목적 o

1. toDoForm.addEventListener("submit", handleToDoSubmit);
2. function handleToDoSubmit(event)
3. const toDos = []; // paintToDo가 실행될 때 array에 객체를 추가
4. function saveToDos() {} : 배열의 내용을 localStorage에 저장 
4. function paintToDo(newTodo)
5. function deleteToDo(event)

toDo 내용을 저장하려고 하는데 어떤 값이 들어오든 string 배열의 형태로 저장하고 싶다.
  - JSON.stringify() 에서 () 안에 바꾸고 싶은 값을 넣으면 된다. 
  - 위의 함수는 JavaScript object 나 array 또는 어떤 JavaScrip 코드건 간에 스트링 배열로 바꿔주는 기능을 한다. 



-------------------------------------------------------------------------------------------------------
